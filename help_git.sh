#!/bin/bash

YELLOW="\033[1;33m"
GREY="\033[1;30m"
RED="\033[1;31m"
GREEN="\033[1;32m"
BLUE="\033[1;34m"
PURPLE="\033[1;35m"
CYAN="\033[1;36m"
WHITE="\033[1;37m"
NO_COLOR="\033[0m"

echo -e "\n${RED}BASIC${NO_COLOR} (Porcelain) GIT COMMANDS IN CLI\n"
echo -e "${BLUE}git ${CYAN}init ${NO_COLOR}- init empty repo"
echo ""
echo -e "${BLUE}git ${CYAN}status ${NO_COLOR}- display status of files"
echo ""
echo -e "${BLUE}git ${CYAN}add ${GREEN}path ${NO_COLOR}- stage file"
echo ""
echo -e "${BLUE}git ${CYAN}commit ${GREEN}-m ${PURPLE}\"message\" ${NO_COLOR}- commit stage files with message"
echo -e "${BLUE}git ${CYAN}commit ${GREEN}--amend -m ${PURPLE}\"message\" ${NO_COLOR}- change last commit message"
echo ""
echo ""
echo -e "${RED}LOG${NO_COLOR} GIT COMMANDS IN CLI\n"
echo -e "${BLUE}git ${CYAN}log ${NO_COLOR}- show git commits history with active page (use arrows, q - quit)"
echo -e "${BLUE}git ${CYAN}log --oneline${NO_COLOR}- compact one line per commit - easiest to read"
echo -e "${BLUE}git ${CYAN}--no-pager log ${GREEN}-n <amount> ${NO_COLOR}- show log log without active page -n shows X amount of commits eg. -n 10"
echo -e "${BLUE}git ${CYAN}log --decorate=<full/short/no>${NO_COLOR}- show git commits history full - full ref branch name, short - just branch name, no - no branch name"
echo -e "${BLUE}git ${CYAN}log --oneline --graph -all${NO_COLOR}- shows graphical representation of git tree"
echo -e "${BLUE}git ${CYAN}log remoteName${NO_COLOR}- display log from remote if you have any. For example ${BLUE}git ${CYAN}log origin${NO_COLOR}"
echo -e "${BLUE}git ${CYAN}log remoteName/branch${NO_COLOR}- like above, you can also display log from specific branch"
echo ""
echo ""
echo -e "${RED}BRANCH${NO_COLOR} GIT COMMANDS IN CLI\n"
echo -e "${BLUE}git ${CYAN}branch ${NO_COLOR}- check current branch name"
echo -e "${BLUE}git ${CYAN}branch ${GREEN}-m oldName newName ${NO_COLOR}- rename current branch name"
echo ""
echo -e "${BLUE}git ${CYAN}branch ${GREEN}newBranchName ${NO_COLOR}- creates new branch"
echo -e "${BLUE}git ${CYAN}switch ${GREEN}-c newBranchName ${NO_COLOR}- creates new branch and immediately switch to it"
echo -e "${BLUE}git ${CYAN}switch ${GREEN}-c newBranchName commithash ${NO_COLOR}- creates new branch from specific commit hash and immediately switch to it"
echo ""
echo -e "${BLUE}git ${CYAN}branch ${GREEN}-d branchName ${NO_COLOR}- deletes to branchName"
echo ""
echo -e "${BLUE}git ${CYAN}switch ${GREEN}branchName ${NO_COLOR}- swtich to branchName - recommended"
echo -e "${BLUE}git ${CYAN}checkout ${GREEN}branchName ${NO_COLOR}- swtich to branchName - old"
echo ""
echo -e "${BLUE}git ${CYAN}merge ${GREEN}branchName ${NO_COLOR}- merge branches - you will merge branchName into the branch that you are currently on - it will pop up nano to add message.\nIf messed up the message you can still fix it with ${BLUE}git ${CYAN}commit ${GREEN}--amend -m ${PURPLE}\"message\" ${NO_COLOR}"
echo -e "${BLUE}git ${CYAN}rebase ${GREEN}branchName ${NO_COLOR}- rebase current branch to branchName, that mean all commits from branchName will be replayed to current branch (current branch will be updated with changes from branchName)"
echo -e "${YELLOW}WARNING!${NO_COLOR} Never rebase while being on main branch (or public branch), you will create a lot of problems. However you can use main branch as a branchName to rebese somewthing onto main"
echo ""
echo -e "${BLUE}git ${CYAN}reset ${GREEN}--soft commithash ${NO_COLOR}- undo last commit/staged changes/unstage changes. Flag --soft undo to prev commit but keep all of the changes."
echo -e "${BLUE}git ${CYAN}reset ${GREEN}--hard commithash ${NO_COLOR}- undo last commit and discards all changes. ${YELLOW}WARNING!${NO_COLOR} Be carefull, it deletes for good."
echo ""
echo ""
echo -e "${RED}REMOTE${NO_COLOR} GIT COMMANDS IN CLI\n"
echo -e "${BLUE}git ${CYAN}remote ${NO_COLOR}- show current remotes" 
echo -e "${BLUE}git ${CYAN}ls-remote ${NO_COLOR}- show current remotes url" 
echo -e "${BLUE}git ${CYAN}remote add ${GREEN}name uri ${NO_COLOR}- adds remote to your repo, name (usually origin) uri can be not only http but also you can have local remote via path" 
echo -e "${BLUE}git ${CYAN}remote remove ${GREEN}name ${NO_COLOR}- remove remote via name" 
echo ""
echo -e "${BLUE}git ${CYAN}fetch ${NO_COLOR}- gets only data from remote for example about changes/branches. Fetch don't download changes" 
echo -e "${BLUE}git ${CYAN}merge ${GREEN}remoteName/branchName ${NO_COLOR}- you can also merge from remote branches"
echo ""
echo -e "${BLUE}git ${CYAN}push ${GREEN}[<remote> <branch>] ${NO_COLOR}- pushes changes to remote to specific branchName" 
echo -e "${BLUE}git ${CYAN}push ${GREEN}remoteName :branchName ${NO_COLOR}- removes branchName by pushing empty branch to it" 
echo -e "${BLUE}git ${CYAN}pull ${GREEN}[<remote>/<branch>] ${NO_COLOR}- removes branchName by pushing empty branch to it" 
echo ""
echo ""
echo -e ${RED}"CONFIG${NO_COLOR} GIT COMMANDS IN CLI\n"
echo -e "Use ${GREEN}--global${NO_COLOR} for global config, the opposite is ${GREEN}--local${NO_COLOR} to operate on config only for that repository, it apply for all git config commands"
echo ""
echo -e "${BLUE}git ${CYAN}config ${GREEN}--list [--global/--local] ${NO_COLOR}- display configuration for global/local or if you use just git list it will display for all"
echo -e "${BLUE}git ${CYAN}config ${GREEN}--add --global user.name ${PURPLE}\"username\"${NO_COLOR}- add to global config user name"
echo -e "${BLUE}git ${CYAN}config ${GREEN}--add --global user.email ${PURPLE}\"mail@example.com\"${NO_COLOR}- add to global config email"
echo -e "${BLUE}git ${CYAN}config ${GREEN}--add --global init.defaultBranch ${PURPLE}\"master\" ${NO_COLOR}- add to global config default main branch as \"master\""
echo -e "${BLUE}git ${CYAN}config ${GREEN}--get <section>.<keyname> ${NO_COLOR}- gets single value"
echo -e "${BLUE}git ${CYAN}config ${GREEN}--unset <key> ${NO_COLOR}- removes value, use ${GREEN}--unset-all <key>${NO_COLOR} to unset all instances of the key"
echo -e "${BLUE}git ${CYAN}config ${GREEN}--remove-section <section> ${NO_COLOR}- gets single whole section"
echo ""
echo ""
echo -e "${BLUE}git ${CYAN}rm ${GREEN}--cached file ${NO_COLOR}- if you by want to add file to gitignore but it was already staged or commited you need to remove it first from cache"
echo ""
echo -e "${RED}ADVANCE${NO_COLOR} (Plumbing) GIT COMMANDS IN CLI\n"
echo -e "${BLUE}git ${CYAN}cat-file ${GREEN}-p <commit_hash or tree_hash or blob_hash> ${NO_COLOR}- show commit contents"
echo ""